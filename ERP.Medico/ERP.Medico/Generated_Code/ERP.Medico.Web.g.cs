//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ERP.Medico
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using ERP.Medico.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace ERP.Medico.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    using ERP.Medico.Web.Resources;
    
    
    /// <summary>
    /// The 'Atendimento' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ERP.Medico.Web")]
    public sealed partial class Atendimento : Entity
    {
        
        private Nullable<double> _altura;
        
        private string _descricao;
        
        private string _descricaoDoencaAtual;
        
        private EntityCollection<Diagnostico> _diagnostico;
        
        private EntityCollection<Exame> _exame;
        
        private DateTime _horario;
        
        private int _id;
        
        private EntityRef<Medico> _medico;
        
        private Nullable<int> _medicoId;
        
        private string _observacoes;
        
        private EntityRef<Paciente> _paciente;
        
        private int _pacienteId;
        
        private Nullable<double> _peso;
        
        private EntityCollection<Prescricao> _prescricao;
        
        private string _queixaPrincipal;
        
        private EntityCollection<Tratamento> _tratamento;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAlturaChanging(Nullable<double> value);
        partial void OnAlturaChanged();
        partial void OnDescricaoChanging(string value);
        partial void OnDescricaoChanged();
        partial void OnDescricaoDoencaAtualChanging(string value);
        partial void OnDescricaoDoencaAtualChanged();
        partial void OnHorarioChanging(DateTime value);
        partial void OnHorarioChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnMedicoIdChanging(Nullable<int> value);
        partial void OnMedicoIdChanged();
        partial void OnObservacoesChanging(string value);
        partial void OnObservacoesChanged();
        partial void OnPacienteIdChanging(int value);
        partial void OnPacienteIdChanged();
        partial void OnPesoChanging(Nullable<double> value);
        partial void OnPesoChanged();
        partial void OnQueixaPrincipalChanging(string value);
        partial void OnQueixaPrincipalChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Atendimento"/> class.
        /// </summary>
        public Atendimento()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Altura' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Altura
        {
            get
            {
                return this._altura;
            }
            set
            {
                if ((this._altura != value))
                {
                    this.OnAlturaChanging(value);
                    this.RaiseDataMemberChanging("Altura");
                    this.ValidateProperty("Altura", value);
                    this._altura = value;
                    this.RaiseDataMemberChanged("Altura");
                    this.OnAlturaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Descricao' value.
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string Descricao
        {
            get
            {
                return this._descricao;
            }
            set
            {
                if ((this._descricao != value))
                {
                    this.OnDescricaoChanging(value);
                    this.RaiseDataMemberChanging("Descricao");
                    this.ValidateProperty("Descricao", value);
                    this._descricao = value;
                    this.RaiseDataMemberChanged("Descricao");
                    this.OnDescricaoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DescricaoDoencaAtual' value.
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string DescricaoDoencaAtual
        {
            get
            {
                return this._descricaoDoencaAtual;
            }
            set
            {
                if ((this._descricaoDoencaAtual != value))
                {
                    this.OnDescricaoDoencaAtualChanging(value);
                    this.RaiseDataMemberChanging("DescricaoDoencaAtual");
                    this.ValidateProperty("DescricaoDoencaAtual", value);
                    this._descricaoDoencaAtual = value;
                    this.RaiseDataMemberChanged("DescricaoDoencaAtual");
                    this.OnDescricaoDoencaAtualChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Diagnostico"/> entity instances.
        /// </summary>
        [Association("Atendimento_Diagnostico", "Id", "AtendimentoId")]
        [XmlIgnore()]
        public EntityCollection<Diagnostico> Diagnostico
        {
            get
            {
                if ((this._diagnostico == null))
                {
                    this._diagnostico = new EntityCollection<Diagnostico>(this, "Diagnostico", this.FilterDiagnostico, this.AttachDiagnostico, this.DetachDiagnostico);
                }
                return this._diagnostico;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Exame"/> entity instances.
        /// </summary>
        [Association("Atendimento_Exame", "Id", "AtendimentoId")]
        [XmlIgnore()]
        public EntityCollection<Exame> Exame
        {
            get
            {
                if ((this._exame == null))
                {
                    this._exame = new EntityCollection<Exame>(this, "Exame", this.FilterExame, this.AttachExame, this.DetachExame);
                }
                return this._exame;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Horario' value.
        /// </summary>
        [DataMember()]
        public DateTime Horario
        {
            get
            {
                return this._horario;
            }
            set
            {
                if ((this._horario != value))
                {
                    this.OnHorarioChanging(value);
                    this.RaiseDataMemberChanging("Horario");
                    this.ValidateProperty("Horario", value);
                    this._horario = value;
                    this.RaiseDataMemberChanged("Horario");
                    this.OnHorarioChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Medico"/> entity.
        /// </summary>
        [Association("Medico_Atendimento", "MedicoId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Medico Medico
        {
            get
            {
                if ((this._medico == null))
                {
                    this._medico = new EntityRef<Medico>(this, "Medico", this.FilterMedico);
                }
                return this._medico.Entity;
            }
            set
            {
                Medico previous = this.Medico;
                if ((previous != value))
                {
                    this.ValidateProperty("Medico", value);
                    if ((previous != null))
                    {
                        this._medico.Entity = null;
                        previous.Atendimento.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.MedicoId = value.Id;
                    }
                    else
                    {
                        this.MedicoId = default(Nullable<int>);
                    }
                    this._medico.Entity = value;
                    if ((value != null))
                    {
                        value.Atendimento.Add(this);
                    }
                    this.RaisePropertyChanged("Medico");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MedicoId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> MedicoId
        {
            get
            {
                return this._medicoId;
            }
            set
            {
                if ((this._medicoId != value))
                {
                    this.OnMedicoIdChanging(value);
                    this.RaiseDataMemberChanging("MedicoId");
                    this.ValidateProperty("MedicoId", value);
                    this._medicoId = value;
                    this.RaiseDataMemberChanged("MedicoId");
                    this.OnMedicoIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Observacoes' value.
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string Observacoes
        {
            get
            {
                return this._observacoes;
            }
            set
            {
                if ((this._observacoes != value))
                {
                    this.OnObservacoesChanging(value);
                    this.RaiseDataMemberChanging("Observacoes");
                    this.ValidateProperty("Observacoes", value);
                    this._observacoes = value;
                    this.RaiseDataMemberChanged("Observacoes");
                    this.OnObservacoesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Paciente"/> entity.
        /// </summary>
        [Association("Paciente_Atendimento", "PacienteId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Paciente Paciente
        {
            get
            {
                if ((this._paciente == null))
                {
                    this._paciente = new EntityRef<Paciente>(this, "Paciente", this.FilterPaciente);
                }
                return this._paciente.Entity;
            }
            set
            {
                Paciente previous = this.Paciente;
                if ((previous != value))
                {
                    this.ValidateProperty("Paciente", value);
                    if ((previous != null))
                    {
                        this._paciente.Entity = null;
                        previous.Atendimento.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.PacienteId = value.Id;
                    }
                    else
                    {
                        this.PacienteId = default(int);
                    }
                    this._paciente.Entity = value;
                    if ((value != null))
                    {
                        value.Atendimento.Add(this);
                    }
                    this.RaisePropertyChanged("Paciente");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PacienteId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int PacienteId
        {
            get
            {
                return this._pacienteId;
            }
            set
            {
                if ((this._pacienteId != value))
                {
                    this.OnPacienteIdChanging(value);
                    this.RaiseDataMemberChanging("PacienteId");
                    this.ValidateProperty("PacienteId", value);
                    this._pacienteId = value;
                    this.RaiseDataMemberChanged("PacienteId");
                    this.OnPacienteIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Peso' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> Peso
        {
            get
            {
                return this._peso;
            }
            set
            {
                if ((this._peso != value))
                {
                    this.OnPesoChanging(value);
                    this.RaiseDataMemberChanging("Peso");
                    this.ValidateProperty("Peso", value);
                    this._peso = value;
                    this.RaiseDataMemberChanged("Peso");
                    this.OnPesoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Prescricao"/> entity instances.
        /// </summary>
        [Association("Atendimento_Prescricao", "Id", "AtendimentoId")]
        [XmlIgnore()]
        public EntityCollection<Prescricao> Prescricao
        {
            get
            {
                if ((this._prescricao == null))
                {
                    this._prescricao = new EntityCollection<Prescricao>(this, "Prescricao", this.FilterPrescricao, this.AttachPrescricao, this.DetachPrescricao);
                }
                return this._prescricao;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'QueixaPrincipal' value.
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string QueixaPrincipal
        {
            get
            {
                return this._queixaPrincipal;
            }
            set
            {
                if ((this._queixaPrincipal != value))
                {
                    this.OnQueixaPrincipalChanging(value);
                    this.RaiseDataMemberChanging("QueixaPrincipal");
                    this.ValidateProperty("QueixaPrincipal", value);
                    this._queixaPrincipal = value;
                    this.RaiseDataMemberChanged("QueixaPrincipal");
                    this.OnQueixaPrincipalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Tratamento"/> entity instances.
        /// </summary>
        [Association("Atendimento_Tratamento", "Id", "AtendimentoId")]
        [XmlIgnore()]
        public EntityCollection<Tratamento> Tratamento
        {
            get
            {
                if ((this._tratamento == null))
                {
                    this._tratamento = new EntityCollection<Tratamento>(this, "Tratamento", this.FilterTratamento, this.AttachTratamento, this.DetachTratamento);
                }
                return this._tratamento;
            }
        }
        
        private void AttachDiagnostico(Diagnostico entity)
        {
            entity.Atendimento = this;
        }
        
        private void DetachDiagnostico(Diagnostico entity)
        {
            entity.Atendimento = null;
        }
        
        private bool FilterDiagnostico(Diagnostico entity)
        {
            return (entity.AtendimentoId == this.Id);
        }
        
        private void AttachExame(Exame entity)
        {
            entity.Atendimento = this;
        }
        
        private void DetachExame(Exame entity)
        {
            entity.Atendimento = null;
        }
        
        private bool FilterExame(Exame entity)
        {
            return (entity.AtendimentoId == this.Id);
        }
        
        private bool FilterMedico(Medico entity)
        {
            return (entity.Id == this.MedicoId);
        }
        
        private bool FilterPaciente(Paciente entity)
        {
            return (entity.Id == this.PacienteId);
        }
        
        private void AttachPrescricao(Prescricao entity)
        {
            entity.Atendimento = this;
        }
        
        private void DetachPrescricao(Prescricao entity)
        {
            entity.Atendimento = null;
        }
        
        private bool FilterPrescricao(Prescricao entity)
        {
            return (entity.AtendimentoId == this.Id);
        }
        
        private void AttachTratamento(Tratamento entity)
        {
            entity.Atendimento = this;
        }
        
        private void DetachTratamento(Tratamento entity)
        {
            entity.Atendimento = null;
        }
        
        private bool FilterTratamento(Tratamento entity)
        {
            return (entity.AtendimentoId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'AuthenticationService' DomainService.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("ERP-Medico-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entity instances that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// The 'Diagnostico' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ERP.Medico.Web")]
    public sealed partial class Diagnostico : Entity
    {
        
        private EntityRef<Atendimento> _atendimento;
        
        private int _atendimentoId;
        
        private string _codigo;
        
        private string _descricao;
        
        private int _id;
        
        private string _observacoes;
        
        private Nullable<bool> _realizadoNaClinica;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAtendimentoIdChanging(int value);
        partial void OnAtendimentoIdChanged();
        partial void OnCodigoChanging(string value);
        partial void OnCodigoChanged();
        partial void OnDescricaoChanging(string value);
        partial void OnDescricaoChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnObservacoesChanging(string value);
        partial void OnObservacoesChanged();
        partial void OnRealizadoNaClinicaChanging(Nullable<bool> value);
        partial void OnRealizadoNaClinicaChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Diagnostico"/> class.
        /// </summary>
        public Diagnostico()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Atendimento"/> entity.
        /// </summary>
        [Association("Atendimento_Diagnostico", "AtendimentoId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Atendimento Atendimento
        {
            get
            {
                if ((this._atendimento == null))
                {
                    this._atendimento = new EntityRef<Atendimento>(this, "Atendimento", this.FilterAtendimento);
                }
                return this._atendimento.Entity;
            }
            set
            {
                Atendimento previous = this.Atendimento;
                if ((previous != value))
                {
                    this.ValidateProperty("Atendimento", value);
                    if ((previous != null))
                    {
                        this._atendimento.Entity = null;
                        previous.Diagnostico.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.AtendimentoId = value.Id;
                    }
                    else
                    {
                        this.AtendimentoId = default(int);
                    }
                    this._atendimento.Entity = value;
                    if ((value != null))
                    {
                        value.Diagnostico.Add(this);
                    }
                    this.RaisePropertyChanged("Atendimento");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AtendimentoId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int AtendimentoId
        {
            get
            {
                return this._atendimentoId;
            }
            set
            {
                if ((this._atendimentoId != value))
                {
                    this.OnAtendimentoIdChanging(value);
                    this.RaiseDataMemberChanging("AtendimentoId");
                    this.ValidateProperty("AtendimentoId", value);
                    this._atendimentoId = value;
                    this.RaiseDataMemberChanged("AtendimentoId");
                    this.OnAtendimentoIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Codigo' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Codigo
        {
            get
            {
                return this._codigo;
            }
            set
            {
                if ((this._codigo != value))
                {
                    this.OnCodigoChanging(value);
                    this.RaiseDataMemberChanging("Codigo");
                    this.ValidateProperty("Codigo", value);
                    this._codigo = value;
                    this.RaiseDataMemberChanged("Codigo");
                    this.OnCodigoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Descricao' value.
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string Descricao
        {
            get
            {
                return this._descricao;
            }
            set
            {
                if ((this._descricao != value))
                {
                    this.OnDescricaoChanging(value);
                    this.RaiseDataMemberChanging("Descricao");
                    this.ValidateProperty("Descricao", value);
                    this._descricao = value;
                    this.RaiseDataMemberChanged("Descricao");
                    this.OnDescricaoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Observacoes' value.
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string Observacoes
        {
            get
            {
                return this._observacoes;
            }
            set
            {
                if ((this._observacoes != value))
                {
                    this.OnObservacoesChanging(value);
                    this.RaiseDataMemberChanging("Observacoes");
                    this.ValidateProperty("Observacoes", value);
                    this._observacoes = value;
                    this.RaiseDataMemberChanged("Observacoes");
                    this.OnObservacoesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RealizadoNaClinica' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> RealizadoNaClinica
        {
            get
            {
                return this._realizadoNaClinica;
            }
            set
            {
                if ((this._realizadoNaClinica != value))
                {
                    this.OnRealizadoNaClinicaChanging(value);
                    this.RaiseDataMemberChanging("RealizadoNaClinica");
                    this.ValidateProperty("RealizadoNaClinica", value);
                    this._realizadoNaClinica = value;
                    this.RaiseDataMemberChanged("RealizadoNaClinica");
                    this.OnRealizadoNaClinicaChanged();
                }
            }
        }
        
        private bool FilterAtendimento(Atendimento entity)
        {
            return (entity.Id == this.AtendimentoId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ERPMedicoDomainService' DomainService.
    /// </summary>
    public sealed partial class ERPMedicoDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ERPMedicoDomainContext"/> class.
        /// </summary>
        public ERPMedicoDomainContext() : 
                this(new WebDomainClient<IERPMedicoDomainServiceContract>(new Uri("ERP-Medico-Web-ERPMedicoDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ERPMedicoDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ERPMedicoDomainService service URI.</param>
        public ERPMedicoDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IERPMedicoDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ERPMedicoDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ERPMedicoDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Atendimento"/> entity instances that have been loaded into this <see cref="ERPMedicoDomainContext"/> instance.
        /// </summary>
        public EntitySet<Atendimento> Atendimentos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Atendimento>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Diagnostico"/> entity instances that have been loaded into this <see cref="ERPMedicoDomainContext"/> instance.
        /// </summary>
        public EntitySet<Diagnostico> Diagnosticos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Diagnostico>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Exame"/> entity instances that have been loaded into this <see cref="ERPMedicoDomainContext"/> instance.
        /// </summary>
        public EntitySet<Exame> Exames
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Exame>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Medico"/> entity instances that have been loaded into this <see cref="ERPMedicoDomainContext"/> instance.
        /// </summary>
        public EntitySet<Medico> Medicos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Medico>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Paciente"/> entity instances that have been loaded into this <see cref="ERPMedicoDomainContext"/> instance.
        /// </summary>
        public EntitySet<Paciente> Pacientes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Paciente>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Prescricao"/> entity instances that have been loaded into this <see cref="ERPMedicoDomainContext"/> instance.
        /// </summary>
        public EntitySet<Prescricao> Prescricaos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Prescricao>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Tratamento"/> entity instances that have been loaded into this <see cref="ERPMedicoDomainContext"/> instance.
        /// </summary>
        public EntitySet<Tratamento> Tratamentos
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Tratamento>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Atendimento"/> entity instances using the 'GetAtendimento' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Atendimento"/> entity instances.</returns>
        public EntityQuery<Atendimento> GetAtendimentoQuery()
        {
            this.ValidateMethod("GetAtendimentoQuery", null);
            return base.CreateQuery<Atendimento>("GetAtendimento", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Diagnostico"/> entity instances using the 'GetDiagnostico' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Diagnostico"/> entity instances.</returns>
        public EntityQuery<Diagnostico> GetDiagnosticoQuery()
        {
            this.ValidateMethod("GetDiagnosticoQuery", null);
            return base.CreateQuery<Diagnostico>("GetDiagnostico", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Exame"/> entity instances using the 'GetExame' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Exame"/> entity instances.</returns>
        public EntityQuery<Exame> GetExameQuery()
        {
            this.ValidateMethod("GetExameQuery", null);
            return base.CreateQuery<Exame>("GetExame", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Medico"/> entity instances using the 'GetMedico' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Medico"/> entity instances.</returns>
        public EntityQuery<Medico> GetMedicoQuery()
        {
            this.ValidateMethod("GetMedicoQuery", null);
            return base.CreateQuery<Medico>("GetMedico", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Paciente"/> entity instances using the 'GetPaciente' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Paciente"/> entity instances.</returns>
        public EntityQuery<Paciente> GetPacienteQuery()
        {
            this.ValidateMethod("GetPacienteQuery", null);
            return base.CreateQuery<Paciente>("GetPaciente", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Paciente"/> entity instances using the 'GetPacienteMedico' query.
        /// </summary>
        /// <param name="medicoId">The value for the 'medicoId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Paciente"/> entity instances.</returns>
        public EntityQuery<Paciente> GetPacienteMedicoQuery(int medicoId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("medicoId", medicoId);
            this.ValidateMethod("GetPacienteMedicoQuery", parameters);
            return base.CreateQuery<Paciente>("GetPacienteMedico", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Prescricao"/> entity instances using the 'GetPrescricao' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Prescricao"/> entity instances.</returns>
        public EntityQuery<Prescricao> GetPrescricaoQuery()
        {
            this.ValidateMethod("GetPrescricaoQuery", null);
            return base.CreateQuery<Prescricao>("GetPrescricao", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Tratamento"/> entity instances using the 'GetTratamento' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Tratamento"/> entity instances.</returns>
        public EntityQuery<Tratamento> GetTratamentoQuery()
        {
            this.ValidateMethod("GetTratamentoQuery", null);
            return base.CreateQuery<Tratamento>("GetTratamento", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ERPMedicoDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ERPMedicoDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IERPMedicoDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetAtendimento' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ERPMedicoDomainService/GetAtendimentoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ERPMedicoDomainService/GetAtendimento", ReplyAction="http://tempuri.org/ERPMedicoDomainService/GetAtendimentoResponse")]
            [WebGet()]
            IAsyncResult BeginGetAtendimento(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAtendimento'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAtendimento'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAtendimento' operation.</returns>
            QueryResult<Atendimento> EndGetAtendimento(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetDiagnostico' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ERPMedicoDomainService/GetDiagnosticoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ERPMedicoDomainService/GetDiagnostico", ReplyAction="http://tempuri.org/ERPMedicoDomainService/GetDiagnosticoResponse")]
            [WebGet()]
            IAsyncResult BeginGetDiagnostico(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetDiagnostico'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetDiagnostico'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetDiagnostico' operation.</returns>
            QueryResult<Diagnostico> EndGetDiagnostico(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetExame' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ERPMedicoDomainService/GetExameDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ERPMedicoDomainService/GetExame", ReplyAction="http://tempuri.org/ERPMedicoDomainService/GetExameResponse")]
            [WebGet()]
            IAsyncResult BeginGetExame(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetExame'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetExame'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetExame' operation.</returns>
            QueryResult<Exame> EndGetExame(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMedico' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ERPMedicoDomainService/GetMedicoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ERPMedicoDomainService/GetMedico", ReplyAction="http://tempuri.org/ERPMedicoDomainService/GetMedicoResponse")]
            [WebGet()]
            IAsyncResult BeginGetMedico(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMedico'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMedico'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMedico' operation.</returns>
            QueryResult<Medico> EndGetMedico(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPaciente' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ERPMedicoDomainService/GetPacienteDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ERPMedicoDomainService/GetPaciente", ReplyAction="http://tempuri.org/ERPMedicoDomainService/GetPacienteResponse")]
            [WebGet()]
            IAsyncResult BeginGetPaciente(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPaciente'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPaciente'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPaciente' operation.</returns>
            QueryResult<Paciente> EndGetPaciente(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPacienteMedico' operation.
            /// </summary>
            /// <param name="medicoId">The value for the 'medicoId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ERPMedicoDomainService/GetPacienteMedicoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ERPMedicoDomainService/GetPacienteMedico", ReplyAction="http://tempuri.org/ERPMedicoDomainService/GetPacienteMedicoResponse")]
            [WebGet()]
            IAsyncResult BeginGetPacienteMedico(int medicoId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPacienteMedico'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPacienteMedico'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPacienteMedico' operation.</returns>
            QueryResult<Paciente> EndGetPacienteMedico(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPrescricao' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ERPMedicoDomainService/GetPrescricaoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ERPMedicoDomainService/GetPrescricao", ReplyAction="http://tempuri.org/ERPMedicoDomainService/GetPrescricaoResponse")]
            [WebGet()]
            IAsyncResult BeginGetPrescricao(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPrescricao'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPrescricao'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPrescricao' operation.</returns>
            QueryResult<Prescricao> EndGetPrescricao(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTratamento' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ERPMedicoDomainService/GetTratamentoDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ERPMedicoDomainService/GetTratamento", ReplyAction="http://tempuri.org/ERPMedicoDomainService/GetTratamentoResponse")]
            [WebGet()]
            IAsyncResult BeginGetTratamento(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTratamento'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTratamento'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTratamento' operation.</returns>
            QueryResult<Tratamento> EndGetTratamento(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ERPMedicoDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ERPMedicoDomainService/SubmitChanges", ReplyAction="http://tempuri.org/ERPMedicoDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ERPMedicoDomainContextEntityContainer : EntityContainer
        {
            
            public ERPMedicoDomainContextEntityContainer()
            {
                this.CreateEntitySet<Atendimento>(EntitySetOperations.All);
                this.CreateEntitySet<Diagnostico>(EntitySetOperations.All);
                this.CreateEntitySet<Exame>(EntitySetOperations.All);
                this.CreateEntitySet<Medico>(EntitySetOperations.All);
                this.CreateEntitySet<Paciente>(EntitySetOperations.All);
                this.CreateEntitySet<Prescricao>(EntitySetOperations.All);
                this.CreateEntitySet<Tratamento>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'Exame' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ERP.Medico.Web")]
    public sealed partial class Exame : Entity
    {
        
        private EntityRef<Atendimento> _atendimento;
        
        private int _atendimentoId;
        
        private string _codigo;
        
        private string _descricao;
        
        private int _id;
        
        private string _observacoes;
        
        private Nullable<bool> _realizadoNaClinica;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAtendimentoIdChanging(int value);
        partial void OnAtendimentoIdChanged();
        partial void OnCodigoChanging(string value);
        partial void OnCodigoChanged();
        partial void OnDescricaoChanging(string value);
        partial void OnDescricaoChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnObservacoesChanging(string value);
        partial void OnObservacoesChanged();
        partial void OnRealizadoNaClinicaChanging(Nullable<bool> value);
        partial void OnRealizadoNaClinicaChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Exame"/> class.
        /// </summary>
        public Exame()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Atendimento"/> entity.
        /// </summary>
        [Association("Atendimento_Exame", "AtendimentoId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Atendimento Atendimento
        {
            get
            {
                if ((this._atendimento == null))
                {
                    this._atendimento = new EntityRef<Atendimento>(this, "Atendimento", this.FilterAtendimento);
                }
                return this._atendimento.Entity;
            }
            set
            {
                Atendimento previous = this.Atendimento;
                if ((previous != value))
                {
                    this.ValidateProperty("Atendimento", value);
                    if ((previous != null))
                    {
                        this._atendimento.Entity = null;
                        previous.Exame.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.AtendimentoId = value.Id;
                    }
                    else
                    {
                        this.AtendimentoId = default(int);
                    }
                    this._atendimento.Entity = value;
                    if ((value != null))
                    {
                        value.Exame.Add(this);
                    }
                    this.RaisePropertyChanged("Atendimento");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AtendimentoId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int AtendimentoId
        {
            get
            {
                return this._atendimentoId;
            }
            set
            {
                if ((this._atendimentoId != value))
                {
                    this.OnAtendimentoIdChanging(value);
                    this.RaiseDataMemberChanging("AtendimentoId");
                    this.ValidateProperty("AtendimentoId", value);
                    this._atendimentoId = value;
                    this.RaiseDataMemberChanged("AtendimentoId");
                    this.OnAtendimentoIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Codigo' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Codigo
        {
            get
            {
                return this._codigo;
            }
            set
            {
                if ((this._codigo != value))
                {
                    this.OnCodigoChanging(value);
                    this.RaiseDataMemberChanging("Codigo");
                    this.ValidateProperty("Codigo", value);
                    this._codigo = value;
                    this.RaiseDataMemberChanged("Codigo");
                    this.OnCodigoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Descricao' value.
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string Descricao
        {
            get
            {
                return this._descricao;
            }
            set
            {
                if ((this._descricao != value))
                {
                    this.OnDescricaoChanging(value);
                    this.RaiseDataMemberChanging("Descricao");
                    this.ValidateProperty("Descricao", value);
                    this._descricao = value;
                    this.RaiseDataMemberChanged("Descricao");
                    this.OnDescricaoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Observacoes' value.
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string Observacoes
        {
            get
            {
                return this._observacoes;
            }
            set
            {
                if ((this._observacoes != value))
                {
                    this.OnObservacoesChanging(value);
                    this.RaiseDataMemberChanging("Observacoes");
                    this.ValidateProperty("Observacoes", value);
                    this._observacoes = value;
                    this.RaiseDataMemberChanged("Observacoes");
                    this.OnObservacoesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RealizadoNaClinica' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> RealizadoNaClinica
        {
            get
            {
                return this._realizadoNaClinica;
            }
            set
            {
                if ((this._realizadoNaClinica != value))
                {
                    this.OnRealizadoNaClinicaChanging(value);
                    this.RaiseDataMemberChanging("RealizadoNaClinica");
                    this.ValidateProperty("RealizadoNaClinica", value);
                    this._realizadoNaClinica = value;
                    this.RaiseDataMemberChanged("RealizadoNaClinica");
                    this.OnRealizadoNaClinicaChanged();
                }
            }
        }
        
        private bool FilterAtendimento(Atendimento entity)
        {
            return (entity.Id == this.AtendimentoId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Medico' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ERP.Medico.Web")]
    public sealed partial class Medico : Entity
    {
        
        private EntityCollection<Atendimento> _atendimento;
        
        private string _codigo;
        
        private int _id;
        
        private string _nome;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodigoChanging(string value);
        partial void OnCodigoChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNomeChanging(string value);
        partial void OnNomeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Medico"/> class.
        /// </summary>
        public Medico()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Atendimento"/> entity instances.
        /// </summary>
        [Association("Medico_Atendimento", "Id", "MedicoId")]
        [XmlIgnore()]
        public EntityCollection<Atendimento> Atendimento
        {
            get
            {
                if ((this._atendimento == null))
                {
                    this._atendimento = new EntityCollection<Atendimento>(this, "Atendimento", this.FilterAtendimento, this.AttachAtendimento, this.DetachAtendimento);
                }
                return this._atendimento;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Codigo' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Codigo
        {
            get
            {
                return this._codigo;
            }
            set
            {
                if ((this._codigo != value))
                {
                    this.OnCodigoChanging(value);
                    this.RaiseDataMemberChanging("Codigo");
                    this.ValidateProperty("Codigo", value);
                    this._codigo = value;
                    this.RaiseDataMemberChanged("Codigo");
                    this.OnCodigoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Nome' value.
        /// </summary>
        [DataMember()]
        [StringLength(220)]
        public string Nome
        {
            get
            {
                return this._nome;
            }
            set
            {
                if ((this._nome != value))
                {
                    this.OnNomeChanging(value);
                    this.RaiseDataMemberChanging("Nome");
                    this.ValidateProperty("Nome", value);
                    this._nome = value;
                    this.RaiseDataMemberChanged("Nome");
                    this.OnNomeChanged();
                }
            }
        }
        
        private void AttachAtendimento(Atendimento entity)
        {
            entity.Medico = this;
        }
        
        private void DetachAtendimento(Atendimento entity)
        {
            entity.Medico = null;
        }
        
        private bool FilterAtendimento(Atendimento entity)
        {
            return (entity.MedicoId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Paciente' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ERP.Medico.Web")]
    public sealed partial class Paciente : Entity
    {
        
        private EntityCollection<Atendimento> _atendimento;
        
        private string _codigo;
        
        private string _historicoFamiliar;
        
        private string _historicoPessoal;
        
        private int _id;
        
        private string _nome;
        
        private string _observacoes;
        
        private string _tipoSangue;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCodigoChanging(string value);
        partial void OnCodigoChanged();
        partial void OnHistoricoFamiliarChanging(string value);
        partial void OnHistoricoFamiliarChanged();
        partial void OnHistoricoPessoalChanging(string value);
        partial void OnHistoricoPessoalChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNomeChanging(string value);
        partial void OnNomeChanged();
        partial void OnObservacoesChanging(string value);
        partial void OnObservacoesChanged();
        partial void OnTipoSangueChanging(string value);
        partial void OnTipoSangueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Paciente"/> class.
        /// </summary>
        public Paciente()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Atendimento"/> entity instances.
        /// </summary>
        [Association("Paciente_Atendimento", "Id", "PacienteId")]
        [XmlIgnore()]
        public EntityCollection<Atendimento> Atendimento
        {
            get
            {
                if ((this._atendimento == null))
                {
                    this._atendimento = new EntityCollection<Atendimento>(this, "Atendimento", this.FilterAtendimento, this.AttachAtendimento, this.DetachAtendimento);
                }
                return this._atendimento;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Codigo' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Codigo
        {
            get
            {
                return this._codigo;
            }
            set
            {
                if ((this._codigo != value))
                {
                    this.OnCodigoChanging(value);
                    this.RaiseDataMemberChanging("Codigo");
                    this.ValidateProperty("Codigo", value);
                    this._codigo = value;
                    this.RaiseDataMemberChanged("Codigo");
                    this.OnCodigoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HistoricoFamiliar' value.
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string HistoricoFamiliar
        {
            get
            {
                return this._historicoFamiliar;
            }
            set
            {
                if ((this._historicoFamiliar != value))
                {
                    this.OnHistoricoFamiliarChanging(value);
                    this.RaiseDataMemberChanging("HistoricoFamiliar");
                    this.ValidateProperty("HistoricoFamiliar", value);
                    this._historicoFamiliar = value;
                    this.RaiseDataMemberChanged("HistoricoFamiliar");
                    this.OnHistoricoFamiliarChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HistoricoPessoal' value.
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string HistoricoPessoal
        {
            get
            {
                return this._historicoPessoal;
            }
            set
            {
                if ((this._historicoPessoal != value))
                {
                    this.OnHistoricoPessoalChanging(value);
                    this.RaiseDataMemberChanging("HistoricoPessoal");
                    this.ValidateProperty("HistoricoPessoal", value);
                    this._historicoPessoal = value;
                    this.RaiseDataMemberChanged("HistoricoPessoal");
                    this.OnHistoricoPessoalChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Nome' value.
        /// </summary>
        [DataMember()]
        [StringLength(220)]
        public string Nome
        {
            get
            {
                return this._nome;
            }
            set
            {
                if ((this._nome != value))
                {
                    this.OnNomeChanging(value);
                    this.RaiseDataMemberChanging("Nome");
                    this.ValidateProperty("Nome", value);
                    this._nome = value;
                    this.RaiseDataMemberChanged("Nome");
                    this.OnNomeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Observacoes' value.
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string Observacoes
        {
            get
            {
                return this._observacoes;
            }
            set
            {
                if ((this._observacoes != value))
                {
                    this.OnObservacoesChanging(value);
                    this.RaiseDataMemberChanging("Observacoes");
                    this.ValidateProperty("Observacoes", value);
                    this._observacoes = value;
                    this.RaiseDataMemberChanged("Observacoes");
                    this.OnObservacoesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TipoSangue' value.
        /// </summary>
        [DataMember()]
        [StringLength(5)]
        public string TipoSangue
        {
            get
            {
                return this._tipoSangue;
            }
            set
            {
                if ((this._tipoSangue != value))
                {
                    this.OnTipoSangueChanging(value);
                    this.RaiseDataMemberChanging("TipoSangue");
                    this.ValidateProperty("TipoSangue", value);
                    this._tipoSangue = value;
                    this.RaiseDataMemberChanged("TipoSangue");
                    this.OnTipoSangueChanged();
                }
            }
        }
        
        private void AttachAtendimento(Atendimento entity)
        {
            entity.Paciente = this;
        }
        
        private void DetachAtendimento(Atendimento entity)
        {
            entity.Paciente = null;
        }
        
        private bool FilterAtendimento(Atendimento entity)
        {
            return (entity.PacienteId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Prescricao' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ERP.Medico.Web")]
    public sealed partial class Prescricao : Entity
    {
        
        private EntityRef<Atendimento> _atendimento;
        
        private int _atendimentoId;
        
        private string _codigo;
        
        private string _descricao;
        
        private int _id;
        
        private string _observacoes;
        
        private Nullable<bool> _realizadoNaClinica;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAtendimentoIdChanging(int value);
        partial void OnAtendimentoIdChanged();
        partial void OnCodigoChanging(string value);
        partial void OnCodigoChanged();
        partial void OnDescricaoChanging(string value);
        partial void OnDescricaoChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnObservacoesChanging(string value);
        partial void OnObservacoesChanged();
        partial void OnRealizadoNaClinicaChanging(Nullable<bool> value);
        partial void OnRealizadoNaClinicaChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Prescricao"/> class.
        /// </summary>
        public Prescricao()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Atendimento"/> entity.
        /// </summary>
        [Association("Atendimento_Prescricao", "AtendimentoId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Atendimento Atendimento
        {
            get
            {
                if ((this._atendimento == null))
                {
                    this._atendimento = new EntityRef<Atendimento>(this, "Atendimento", this.FilterAtendimento);
                }
                return this._atendimento.Entity;
            }
            set
            {
                Atendimento previous = this.Atendimento;
                if ((previous != value))
                {
                    this.ValidateProperty("Atendimento", value);
                    if ((previous != null))
                    {
                        this._atendimento.Entity = null;
                        previous.Prescricao.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.AtendimentoId = value.Id;
                    }
                    else
                    {
                        this.AtendimentoId = default(int);
                    }
                    this._atendimento.Entity = value;
                    if ((value != null))
                    {
                        value.Prescricao.Add(this);
                    }
                    this.RaisePropertyChanged("Atendimento");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AtendimentoId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int AtendimentoId
        {
            get
            {
                return this._atendimentoId;
            }
            set
            {
                if ((this._atendimentoId != value))
                {
                    this.OnAtendimentoIdChanging(value);
                    this.RaiseDataMemberChanging("AtendimentoId");
                    this.ValidateProperty("AtendimentoId", value);
                    this._atendimentoId = value;
                    this.RaiseDataMemberChanged("AtendimentoId");
                    this.OnAtendimentoIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Codigo' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Codigo
        {
            get
            {
                return this._codigo;
            }
            set
            {
                if ((this._codigo != value))
                {
                    this.OnCodigoChanging(value);
                    this.RaiseDataMemberChanging("Codigo");
                    this.ValidateProperty("Codigo", value);
                    this._codigo = value;
                    this.RaiseDataMemberChanged("Codigo");
                    this.OnCodigoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Descricao' value.
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string Descricao
        {
            get
            {
                return this._descricao;
            }
            set
            {
                if ((this._descricao != value))
                {
                    this.OnDescricaoChanging(value);
                    this.RaiseDataMemberChanging("Descricao");
                    this.ValidateProperty("Descricao", value);
                    this._descricao = value;
                    this.RaiseDataMemberChanged("Descricao");
                    this.OnDescricaoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Observacoes' value.
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string Observacoes
        {
            get
            {
                return this._observacoes;
            }
            set
            {
                if ((this._observacoes != value))
                {
                    this.OnObservacoesChanging(value);
                    this.RaiseDataMemberChanging("Observacoes");
                    this.ValidateProperty("Observacoes", value);
                    this._observacoes = value;
                    this.RaiseDataMemberChanged("Observacoes");
                    this.OnObservacoesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RealizadoNaClinica' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> RealizadoNaClinica
        {
            get
            {
                return this._realizadoNaClinica;
            }
            set
            {
                if ((this._realizadoNaClinica != value))
                {
                    this.OnRealizadoNaClinicaChanging(value);
                    this.RaiseDataMemberChanging("RealizadoNaClinica");
                    this.ValidateProperty("RealizadoNaClinica", value);
                    this._realizadoNaClinica = value;
                    this.RaiseDataMemberChanged("RealizadoNaClinica");
                    this.OnRealizadoNaClinicaChanged();
                }
            }
        }
        
        private bool FilterAtendimento(Atendimento entity)
        {
            return (entity.Id == this.AtendimentoId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'RegistrationData' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ERP.Medico.Web")]
    public sealed partial class RegistrationData : Entity
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationData"/> class.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Answer' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [RoundtripOriginal()]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaisePropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Question' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [RoundtripOriginal()]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaisePropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._email == null) 
                        || (this._userName == null)))
            {
                return null;
            }
            return EntityKey.Create(this._email, this._userName);
        }
    }
    
    /// <summary>
    /// The 'Tratamento' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ERP.Medico.Web")]
    public sealed partial class Tratamento : Entity
    {
        
        private EntityRef<Atendimento> _atendimento;
        
        private int _atendimentoId;
        
        private string _codigo;
        
        private string _descricao;
        
        private int _id;
        
        private string _observacoes;
        
        private Nullable<bool> _realizadoNaClinica;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAtendimentoIdChanging(int value);
        partial void OnAtendimentoIdChanged();
        partial void OnCodigoChanging(string value);
        partial void OnCodigoChanged();
        partial void OnDescricaoChanging(string value);
        partial void OnDescricaoChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnObservacoesChanging(string value);
        partial void OnObservacoesChanged();
        partial void OnRealizadoNaClinicaChanging(Nullable<bool> value);
        partial void OnRealizadoNaClinicaChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Tratamento"/> class.
        /// </summary>
        public Tratamento()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Atendimento"/> entity.
        /// </summary>
        [Association("Atendimento_Tratamento", "AtendimentoId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Atendimento Atendimento
        {
            get
            {
                if ((this._atendimento == null))
                {
                    this._atendimento = new EntityRef<Atendimento>(this, "Atendimento", this.FilterAtendimento);
                }
                return this._atendimento.Entity;
            }
            set
            {
                Atendimento previous = this.Atendimento;
                if ((previous != value))
                {
                    this.ValidateProperty("Atendimento", value);
                    if ((previous != null))
                    {
                        this._atendimento.Entity = null;
                        previous.Tratamento.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.AtendimentoId = value.Id;
                    }
                    else
                    {
                        this.AtendimentoId = default(int);
                    }
                    this._atendimento.Entity = value;
                    if ((value != null))
                    {
                        value.Tratamento.Add(this);
                    }
                    this.RaisePropertyChanged("Atendimento");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AtendimentoId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int AtendimentoId
        {
            get
            {
                return this._atendimentoId;
            }
            set
            {
                if ((this._atendimentoId != value))
                {
                    this.OnAtendimentoIdChanging(value);
                    this.RaiseDataMemberChanging("AtendimentoId");
                    this.ValidateProperty("AtendimentoId", value);
                    this._atendimentoId = value;
                    this.RaiseDataMemberChanged("AtendimentoId");
                    this.OnAtendimentoIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Codigo' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Codigo
        {
            get
            {
                return this._codigo;
            }
            set
            {
                if ((this._codigo != value))
                {
                    this.OnCodigoChanging(value);
                    this.RaiseDataMemberChanging("Codigo");
                    this.ValidateProperty("Codigo", value);
                    this._codigo = value;
                    this.RaiseDataMemberChanged("Codigo");
                    this.OnCodigoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Descricao' value.
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string Descricao
        {
            get
            {
                return this._descricao;
            }
            set
            {
                if ((this._descricao != value))
                {
                    this.OnDescricaoChanging(value);
                    this.RaiseDataMemberChanging("Descricao");
                    this.ValidateProperty("Descricao", value);
                    this._descricao = value;
                    this.RaiseDataMemberChanged("Descricao");
                    this.OnDescricaoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Observacoes' value.
        /// </summary>
        [DataMember()]
        [StringLength(4000)]
        public string Observacoes
        {
            get
            {
                return this._observacoes;
            }
            set
            {
                if ((this._observacoes != value))
                {
                    this.OnObservacoesChanging(value);
                    this.RaiseDataMemberChanging("Observacoes");
                    this.ValidateProperty("Observacoes", value);
                    this._observacoes = value;
                    this.RaiseDataMemberChanged("Observacoes");
                    this.OnObservacoesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RealizadoNaClinica' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> RealizadoNaClinica
        {
            get
            {
                return this._realizadoNaClinica;
            }
            set
            {
                if ((this._realizadoNaClinica != value))
                {
                    this.OnRealizadoNaClinicaChanging(value);
                    this.RaiseDataMemberChanging("RealizadoNaClinica");
                    this.ValidateProperty("RealizadoNaClinica", value);
                    this._realizadoNaClinica = value;
                    this.RaiseDataMemberChanged("RealizadoNaClinica");
                    this.OnRealizadoNaClinicaChanged();
                }
            }
        }
        
        private bool FilterAtendimento(Atendimento entity)
        {
            return (entity.Id == this.AtendimentoId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ERP.Medico.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'UserRegistrationService' DomainService.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("ERP-Medico-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserRegistrationService service URI.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="RegistrationData"/> entity instances that have been loaded into this <see cref="UserRegistrationContext"/> instance.
        /// </summary>
        public EntitySet<RegistrationData> RegistrationDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<RegistrationData>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="RegistrationData"/> entity instances using the 'GetUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="RegistrationData"/> entity instances.</returns>
        public EntityQuery<RegistrationData> GetUsersQuery()
        {
            this.ValidateMethod("GetUsersQuery", null);
            return base.CreateQuery<RegistrationData>("GetUsers", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserRegistrationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            /// <returns>The 'CreateUserStatus' returned from the 'CreateUser' operation.</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/GetUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/GetUsers", ReplyAction="http://tempuri.org/UserRegistrationService/GetUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUsers' operation.</returns>
            QueryResult<RegistrationData> EndGetUsers(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
                this.CreateEntitySet<RegistrationData>(EntitySetOperations.None);
            }
        }
    }
}
