//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace ERP.Medico.ERPMedicoServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Agendamento", Namespace="http://schemas.datacontract.org/2004/07/ERP.Medico.Web.Models")]
    public partial class Agendamento : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime DataField;
        
        private System.TimeSpan HoraField;
        
        private System.DateTime HorarioField;
        
        private System.Guid IdField;
        
        private int MedicoIdField;
        
        private string NomePacienteField;
        
        private int PacienteIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Data {
            get {
                return this.DataField;
            }
            set {
                if ((this.DataField.Equals(value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Hora {
            get {
                return this.HoraField;
            }
            set {
                if ((this.HoraField.Equals(value) != true)) {
                    this.HoraField = value;
                    this.RaisePropertyChanged("Hora");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Horario {
            get {
                return this.HorarioField;
            }
            set {
                if ((this.HorarioField.Equals(value) != true)) {
                    this.HorarioField = value;
                    this.RaisePropertyChanged("Horario");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MedicoId {
            get {
                return this.MedicoIdField;
            }
            set {
                if ((this.MedicoIdField.Equals(value) != true)) {
                    this.MedicoIdField = value;
                    this.RaisePropertyChanged("MedicoId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NomePaciente {
            get {
                return this.NomePacienteField;
            }
            set {
                if ((object.ReferenceEquals(this.NomePacienteField, value) != true)) {
                    this.NomePacienteField = value;
                    this.RaisePropertyChanged("NomePaciente");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PacienteId {
            get {
                return this.PacienteIdField;
            }
            set {
                if ((this.PacienteIdField.Equals(value) != true)) {
                    this.PacienteIdField = value;
                    this.RaisePropertyChanged("PacienteId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ERPMedicoServiceReference.ERPMedicoService")]
    public interface ERPMedicoService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ERPMedicoService/GetAgendamentosMedico", ReplyAction="urn:ERPMedicoService/GetAgendamentosMedicoResponse")]
        System.IAsyncResult BeginGetAgendamentosMedico(int medicoId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ERP.Medico.ERPMedicoServiceReference.Agendamento> EndGetAgendamentosMedico(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ERPMedicoService/GetAgendamentosMedicoData", ReplyAction="urn:ERPMedicoService/GetAgendamentosMedicoDataResponse")]
        System.IAsyncResult BeginGetAgendamentosMedicoData(int medicoId, System.DateTime data, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ERP.Medico.ERPMedicoServiceReference.Agendamento> EndGetAgendamentosMedicoData(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ERPMedicoServiceChannel : ERP.Medico.ERPMedicoServiceReference.ERPMedicoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAgendamentosMedicoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAgendamentosMedicoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ERP.Medico.ERPMedicoServiceReference.Agendamento> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ERP.Medico.ERPMedicoServiceReference.Agendamento>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAgendamentosMedicoDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAgendamentosMedicoDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ERP.Medico.ERPMedicoServiceReference.Agendamento> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ERP.Medico.ERPMedicoServiceReference.Agendamento>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ERPMedicoServiceClient : System.ServiceModel.ClientBase<ERP.Medico.ERPMedicoServiceReference.ERPMedicoService>, ERP.Medico.ERPMedicoServiceReference.ERPMedicoService {
        
        private BeginOperationDelegate onBeginGetAgendamentosMedicoDelegate;
        
        private EndOperationDelegate onEndGetAgendamentosMedicoDelegate;
        
        private System.Threading.SendOrPostCallback onGetAgendamentosMedicoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAgendamentosMedicoDataDelegate;
        
        private EndOperationDelegate onEndGetAgendamentosMedicoDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetAgendamentosMedicoDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ERPMedicoServiceClient() {
        }
        
        public ERPMedicoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ERPMedicoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ERPMedicoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ERPMedicoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetAgendamentosMedicoCompletedEventArgs> GetAgendamentosMedicoCompleted;
        
        public event System.EventHandler<GetAgendamentosMedicoDataCompletedEventArgs> GetAgendamentosMedicoDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ERP.Medico.ERPMedicoServiceReference.ERPMedicoService.BeginGetAgendamentosMedico(int medicoId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAgendamentosMedico(medicoId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ERP.Medico.ERPMedicoServiceReference.Agendamento> ERP.Medico.ERPMedicoServiceReference.ERPMedicoService.EndGetAgendamentosMedico(System.IAsyncResult result) {
            return base.Channel.EndGetAgendamentosMedico(result);
        }
        
        private System.IAsyncResult OnBeginGetAgendamentosMedico(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int medicoId = ((int)(inValues[0]));
            return ((ERP.Medico.ERPMedicoServiceReference.ERPMedicoService)(this)).BeginGetAgendamentosMedico(medicoId, callback, asyncState);
        }
        
        private object[] OnEndGetAgendamentosMedico(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ERP.Medico.ERPMedicoServiceReference.Agendamento> retVal = ((ERP.Medico.ERPMedicoServiceReference.ERPMedicoService)(this)).EndGetAgendamentosMedico(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAgendamentosMedicoCompleted(object state) {
            if ((this.GetAgendamentosMedicoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAgendamentosMedicoCompleted(this, new GetAgendamentosMedicoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAgendamentosMedicoAsync(int medicoId) {
            this.GetAgendamentosMedicoAsync(medicoId, null);
        }
        
        public void GetAgendamentosMedicoAsync(int medicoId, object userState) {
            if ((this.onBeginGetAgendamentosMedicoDelegate == null)) {
                this.onBeginGetAgendamentosMedicoDelegate = new BeginOperationDelegate(this.OnBeginGetAgendamentosMedico);
            }
            if ((this.onEndGetAgendamentosMedicoDelegate == null)) {
                this.onEndGetAgendamentosMedicoDelegate = new EndOperationDelegate(this.OnEndGetAgendamentosMedico);
            }
            if ((this.onGetAgendamentosMedicoCompletedDelegate == null)) {
                this.onGetAgendamentosMedicoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAgendamentosMedicoCompleted);
            }
            base.InvokeAsync(this.onBeginGetAgendamentosMedicoDelegate, new object[] {
                        medicoId}, this.onEndGetAgendamentosMedicoDelegate, this.onGetAgendamentosMedicoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ERP.Medico.ERPMedicoServiceReference.ERPMedicoService.BeginGetAgendamentosMedicoData(int medicoId, System.DateTime data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAgendamentosMedicoData(medicoId, data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ERP.Medico.ERPMedicoServiceReference.Agendamento> ERP.Medico.ERPMedicoServiceReference.ERPMedicoService.EndGetAgendamentosMedicoData(System.IAsyncResult result) {
            return base.Channel.EndGetAgendamentosMedicoData(result);
        }
        
        private System.IAsyncResult OnBeginGetAgendamentosMedicoData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int medicoId = ((int)(inValues[0]));
            System.DateTime data = ((System.DateTime)(inValues[1]));
            return ((ERP.Medico.ERPMedicoServiceReference.ERPMedicoService)(this)).BeginGetAgendamentosMedicoData(medicoId, data, callback, asyncState);
        }
        
        private object[] OnEndGetAgendamentosMedicoData(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ERP.Medico.ERPMedicoServiceReference.Agendamento> retVal = ((ERP.Medico.ERPMedicoServiceReference.ERPMedicoService)(this)).EndGetAgendamentosMedicoData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAgendamentosMedicoDataCompleted(object state) {
            if ((this.GetAgendamentosMedicoDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAgendamentosMedicoDataCompleted(this, new GetAgendamentosMedicoDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAgendamentosMedicoDataAsync(int medicoId, System.DateTime data) {
            this.GetAgendamentosMedicoDataAsync(medicoId, data, null);
        }
        
        public void GetAgendamentosMedicoDataAsync(int medicoId, System.DateTime data, object userState) {
            if ((this.onBeginGetAgendamentosMedicoDataDelegate == null)) {
                this.onBeginGetAgendamentosMedicoDataDelegate = new BeginOperationDelegate(this.OnBeginGetAgendamentosMedicoData);
            }
            if ((this.onEndGetAgendamentosMedicoDataDelegate == null)) {
                this.onEndGetAgendamentosMedicoDataDelegate = new EndOperationDelegate(this.OnEndGetAgendamentosMedicoData);
            }
            if ((this.onGetAgendamentosMedicoDataCompletedDelegate == null)) {
                this.onGetAgendamentosMedicoDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAgendamentosMedicoDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetAgendamentosMedicoDataDelegate, new object[] {
                        medicoId,
                        data}, this.onEndGetAgendamentosMedicoDataDelegate, this.onGetAgendamentosMedicoDataCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ERP.Medico.ERPMedicoServiceReference.ERPMedicoService CreateChannel() {
            return new ERPMedicoServiceClientChannel(this);
        }
        
        private class ERPMedicoServiceClientChannel : ChannelBase<ERP.Medico.ERPMedicoServiceReference.ERPMedicoService>, ERP.Medico.ERPMedicoServiceReference.ERPMedicoService {
            
            public ERPMedicoServiceClientChannel(System.ServiceModel.ClientBase<ERP.Medico.ERPMedicoServiceReference.ERPMedicoService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetAgendamentosMedico(int medicoId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = medicoId;
                System.IAsyncResult _result = base.BeginInvoke("GetAgendamentosMedico", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ERP.Medico.ERPMedicoServiceReference.Agendamento> EndGetAgendamentosMedico(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ERP.Medico.ERPMedicoServiceReference.Agendamento> _result = ((System.Collections.ObjectModel.ObservableCollection<ERP.Medico.ERPMedicoServiceReference.Agendamento>)(base.EndInvoke("GetAgendamentosMedico", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAgendamentosMedicoData(int medicoId, System.DateTime data, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = medicoId;
                _args[1] = data;
                System.IAsyncResult _result = base.BeginInvoke("GetAgendamentosMedicoData", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ERP.Medico.ERPMedicoServiceReference.Agendamento> EndGetAgendamentosMedicoData(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ERP.Medico.ERPMedicoServiceReference.Agendamento> _result = ((System.Collections.ObjectModel.ObservableCollection<ERP.Medico.ERPMedicoServiceReference.Agendamento>)(base.EndInvoke("GetAgendamentosMedicoData", _args, result)));
                return _result;
            }
        }
    }
}
